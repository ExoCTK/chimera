To compile the code written in C:
   1) make sure you are in the directory containing that code.
   
   2) at the command line type: python setup.py build_ext --inplace
      this runs the file setup.py which calls a built in python
   function that compiles the code into a .so file which can 
   then be called by python functions.

To add new gases:
   1) In the function xsects() in the file fm.py, 
   append the cross-sections for that gas to the end of the numpy array
   called xsects (before the log10 function is called on it). IMPORTANT:
   H2 and He must remain the first two elements of this array(they are 
   special because we use their abundances squared to calculate tau).
   
   2) In the function tran in fm.py, add the fractional abundace to the 
   list Fractions.  IMPORTANT: the list Fractions must contain the 
   fractions of the species in the same order that restore.xsects[3] has them
   (restore.xsects[3] is the 4D arrays of cross-sections).

Differences:
   1) function xsects() in fm.py which is called by restore once when the file fm.py
   is read in.  The cross-sections had to be gathered into one large array for speed
   purposes.  Also, we are interpolating log(sigma) vs log(T, P) so we take the log of 
   each cross-section
   
   2) Interpolation: in the function CalculateTau in the file _tau.c
   This function is called by tran to calculate the optical depth as a function of wno 
   and atmosphere level.  It has to interpolate the cross-sections to the T,P values of 
   the atmosphere levels.  It now does this on a log-log grid.

   3) All N-dimensional arrays in numpy are stored as 1D arrays in C.  For example, if
   arr is a 3 dimensional numpy array such that arr.shape = (10, 20, 30) and we want
   to access the element (3,4,5), we would write arr[3*20*30 + 4*30 + 5]
      This is why in both C functions, there exists integer variables called offset.
      They contain values like 20*30 so that we dont have to calculate that every time 
      we want to access the array

   4) Both C functions take care to minimize the number of calculations made. For example,
   in the function CalculateTau in _tau.c, all deltatau's will be scaled by a factor dependent 
   only on the atmosphere level so this is now computed outside the wavenumber for loop
   to minimize the number of times we have to compute that scaling factor.

   5) Dont directly call the C functions.  Use the python functions CalculateTau and InitXsects found
   in the module ctran.py.  These two python functions serve two purposes
      1) pass additional arguments to c functions (e.g. length of input arrays)	
      2) call c functions which convert the python arguments to c arguments and then 
      pass these arguments to the c functions which do the work of interpolating and calculating.
